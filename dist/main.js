(()=>{"use strict";class e{constructor(e){this.title=e}}let t=[];class n{constructor(e,t,n,l){this.title=e,this.dueDate=t,this.projectTitle=n,this.priority=l}}const l=[];(()=>{let e=document.querySelector(".newTaskBtn"),t=document.querySelector(".newTaskContainer");e.addEventListener("click",(function(){t.style.display="flex",e.style.display="none"}));let c=document.querySelector(".confirmTaskBtn"),o=document.querySelector(".cancelTaskBtn");c.addEventListener("click",(function(){let c=document.querySelector("#taskName").value,o=document.querySelector("#taskDate").value,s=document.querySelector("#prioritySelector").value,a=new n(c,o,"default",s);console.log(l),l.push(a),document.querySelector(".taskList").innerHTML="",(()=>{let e=document.querySelector(".taskList");(function(){let e=l.filter((e=>e.projectTitle.includes("default")));return console.log(e),e})().forEach((t=>{let n=document.createElement("div");n.dataset.index=i,n.classList.add("task"),e.append(n);let l=document.createElement("span");l.classList.add("material-symbols-outlined"),l.textContent="radio_button_unchecked";let c=document.createElement("p");c.classList.add("taskTitle"),c.textContent=t.title;let o=document.createElement("p");o.classList.add("taskDate"),o.textContent=t.dueDate;let s=document.createElement("span");s.classList.add("material-symbols-outlined"),s.textContent="delete";let a=document.createElement("span");a.classList.add("material-symbols-outlined"),a.textContent="keyboard_double_arrow_down",n.append(l,c,o,s,a)}))})(),document.querySelectorAll("#taskName, #taskDate, #prioritySelector").forEach((e=>{e.value=""})),t.style.display="none",e.style.display="inline"})),o.addEventListener("click",(function(){t.style.display="none",e.style.display="inline"}))})(),(()=>{let n=document.querySelector(".newProjectBtn"),l=document.querySelector(".newProjectContainer");n.addEventListener("click",(function(){l.style.display="flex",n.style.display="none"}));let c=document.querySelector(".confirmProjectBtn"),o=document.querySelector(".cancelProjectBtn");c.addEventListener("click",(function(){let c=document.querySelector("#projectName").value,o=new e(c);t.push(o),document.querySelectorAll("#projectName").forEach((e=>{e.value=""})),l.style.display="none",n.style.display="inline"})),o.addEventListener("click",(function(){l.style.display="none",n.style.display="inline"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,