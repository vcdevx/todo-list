(()=>{"use strict";class e{constructor(e){this.title=e}}let t=[];new e("New Project");class n{constructor(e,t,n,l,s){this.title=e,this.dueDate=t,this.projectTitle=n,this.priority=l,this.isComplete=s}}let l=[],s=[];const a=e=>{localStorage.setItem("taskList",JSON.stringify(e))},c=e=>{localStorage.setItem("projectList",JSON.stringify(e))},o=()=>{let e=document.querySelector(".taskList"),n=0;l.filter((e=>e.projectTitle.includes(s))).forEach((t=>{let s=document.createElement("div");s.dataset.index=n,s.classList.add("task","lowPriority"),e.append(s);let c=document.createElement("div");c.classList.add("taskTitleContainer");let r=document.createElement("span");r.classList.add("material-symbols-outlined","taskCheck"),r.textContent="radio_button_unchecked";let d=document.createElement("p");d.classList.add("taskTitle"),d.textContent=t.title,c.append(r,d);let u=document.createElement("p");u.classList.add("taskDate"),u.textContent=t.dueDate;let m=document.createElement("span");m.classList.add("material-symbols-outlined","deleteTaskBtn"),m.textContent="delete",m.dataset.index=n,n++;let p=document.createElement("span");p.classList.add("material-symbols-outlined","taskEdit"),p.textContent="edit_square","high"==t.priority&&(s.classList.remove("lowPriority"),s.classList.add("highPriority")),1==t.isComplete&&(s.classList.add("completeTask"),r.classList.add("taskCheckTrue"),r.textContent="check_circle"),s.append(c,u,m),m.addEventListener("click",(function(e){e.target.classList.contains("deleteTaskBtn")&&(e.stopPropagation(),console.log(m.dataset.index),l.splice(m.dataset.index,1),e.target.closest(".task").remove(),i(),o(),a(l))})),r.addEventListener("click",(function(e){e.target.classList.contains("taskCheck")&&(0==l[m.dataset.index].isComplete?(e.stopPropagation(),e.target.classList.add("taskCheckTrue"),l[m.dataset.index].isComplete=!0,i(),o(),a(l)):(e.stopPropagation(),e.target.classList.remove("taskCheckTrue"),e.target.textContent="radio_button_unchecked",l[m.dataset.index].isComplete=!1,i(),o(),a(l)))}))}));let c=document.querySelector(".currentProjectHeader");-1!==t.map((e=>e.title)).indexOf(s)?c.textContent=s:c.textContent=""},i=()=>{document.querySelector(".taskList").innerHTML=""},r=()=>{let e=document.querySelector(".projectList"),n=0;t.forEach((s=>{let u=document.createElement("div");u.classList.add("project"),e.append(u),u.dataset.index=n,n++;let m=document.createElement("p");m.classList.add("taskTitle"),m.textContent=s.title;let p=document.createElement("span");p.classList.add("material-symbols-outlined","deleteProjectBtn"),p.textContent="delete",u.append(m,p),p.addEventListener("click",(function(e){const n=e.target.previousElementSibling.textContent.toString();if(e.target.classList.contains("deleteProjectBtn")){function s(e,t){for(let n=t.length-1;n>=0;n--)t[n].projectTitle===e&&t.splice(n,1)}e.stopPropagation(),console.log(u.dataset.index),t.splice(u.dataset.index,1),console.log(n),e.target.closest(".project").remove(),s(n,l),d(),r(),i(),o(),c(t),a(l)}}))})),document.querySelector(".menuBtn").addEventListener("click",(()=>{let e=document.querySelector(".sidebar"),t=document.querySelector(".listContainer");e.classList.contains("collapsed")?(e.style.width="300px",e.style.zIndex="1",t.style.marginLeft="300px",e.classList.remove("collapsed")):(e.style.width="0",e.style.zIndex="-1",t.style.marginLeft="0",e.classList.add("collapsed"))}))},d=()=>{document.querySelector(".projectList").innerHTML=""};document.addEventListener("click",(function(e){if(e.target.classList.contains("project")){let t=e.target.querySelector(".taskTitle").textContent;s=t,i(),o(l)}})),t=null===localStorage.getItem("projectList")?[]:JSON.parse(localStorage.getItem("projectList")),l=null===localStorage.getItem("taskList")?[]:JSON.parse(localStorage.getItem("taskList")),s=null===localStorage.getItem("currentProject")?"":JSON.parse(localStorage.getItem("currentProject")),o(),r(),(()=>{let e=document.querySelector(".newTaskBtn"),c=document.querySelector(".newTaskContainer");e.addEventListener("click",(function(){0===t.length?alert("Please create a project first!"):null===s?alert("Please create or select an existing project!"):(c.style.display="flex",e.style.display="none")}));let r=document.querySelector(".confirmTaskBtn"),d=document.querySelector(".cancelTaskBtn");r.addEventListener("click",(function(){let t=document.querySelector("#taskName").value,r=document.querySelector("#taskDate").value,d=document.querySelector("#prioritySelector").value,u=new n(t,r,s,d,!1);l.push(u),i(),o(l),document.querySelectorAll("#taskName, #taskDate, #prioritySelector").forEach((e=>{e.value=""})),c.style.display="none",e.style.display="inline",a(l)})),d.addEventListener("click",(function(){c.style.display="none",e.style.display="inline"}))})(),(()=>{let n=document.querySelector(".newProjectBtn"),l=document.querySelector(".newProjectContainer");n.addEventListener("click",(function(){l.style.display="flex",n.style.display="none"}));let a=document.querySelector(".confirmProjectBtn"),u=document.querySelector(".cancelProjectBtn");a.addEventListener("click",(function(){let a=document.querySelector("#projectName").value,u=new e(a);var m;t.push(u),s=a,d(),r(),i(),o(),document.querySelectorAll("#projectName").forEach((e=>{e.value=""})),l.style.display="none",n.style.display="inline",c(t),m=s,localStorage.setItem("currentProject",JSON.stringify(m))})),u.addEventListener("click",(function(){l.style.display="none",n.style.display="inline"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,